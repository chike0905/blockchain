@startuml
skinparam shadowing false
skinparam monochrome true
title Blockchain: Get new block sequence

Other_Node -> Message_Manager: Send New Block Message
Message_Manager -> Node_Manager: Send Recieve Message
Node_Manager -> Node_Manager: Check Message Type
activate Node_Manager
Node_Manager -> Chain_Manager: New Block
activate Chain_Manager
Chain_Manager -> Block_Verifier: Verify New Block
activate Block_Verifier
Block_Verifier -> Storage:Read Last Block
activate Storage
Storage --> Block_Verifier: Last Block
deactivate Storage
Block_Verifier -> Chain_Manager: Pass/Fail
deactivate Block_Verifier
Chain_Manager --> Node_Manager: Pass/Fail
deactivate Chain_Manager
alt Pass
  Node_Manager -> Chain_Manager: Save Block Request
  activate Chain_Manager
  Chain_Manager -> TX_Manager: Remove TXs in New Block from TX Pool
  Chain_Manager -> Storage: Save Block
  Chain_Manager --> Node_Manager: Pass/Fail
  deactivate Chain_Manager
else Fail
  Node_Manager -> Node_Manager: Check Stuation
  alt orphan
    loop from Last Block in Storage to New Block
      Node_Manager -> Message_Manager: Request Get Block
      activate Message_Manager
      Message_Manager -> Other_Node: Get Block Mssage
      Other_Node --> Message_Manager: Block
      Message_Manager  --> Node_Manager: Block
      deactivate Message_Manager
      Node_Manager -> Chain_Manager: Block
      activate Chain_Manager
      Chain_Manager -> Block_Verifier: Verify Block
      Block_Verifier -> Chain_Manager: Pass/Fail
      Chain_Manager --> Node_Manager: Pass/Fail
      deactivate Chain_Manager
      alt Pass
        Node_Manager -> Chain_Manager: Save Block Request
        activate Chain_Manager
        Chain_Manager -> TX_Manager: Remove TXs in New Block from TX Pool
        Chain_Manager -> Storage: Save Block
        Chain_Manager --> Node_Manager: Pass/Fail
        deactivate Chain_Manager
      else Fail
        Node_Manager -> Node_Manager: Take as a Conflict
      end
    end
  else old
    Node_Manager -> Chain_Manager: Get Block of Numebr\nin New Block Request
    activate Chain_Manager
    Chain_Manager -> Storage: Read Block
    Storage --> Chain_Manager: Block
    Chain_Manager --> Node_Manager: Block
    deactivate Chain_Manager
    Node_Manager -> Node_Manager: Check Block is\nSame as in Storage
    alt Same Block in Storage
      note over Node_Manager:Do nothing
    else Different Block in Storage
      Node_Manager -> Node_Manager: Take as a conflict
    end
  else conflict
    Node_Manager -> Chain_Manager: Get Last Block Request
    activate Chain_Manager
    Chain_Manager -> Storage: Get Last Block
    activate Storage
    Storage --> Chain_Manager :Last Block
    deactivate Storage
    Chain_Manager --> Node_Manager: Last Block
    deactivate Chain_Manager
    Node_Manager -> Node_Manager: Comparison Score of Block\nin Storage and new Block
    alt Block in Storage is correct
      note over Node_Manager:Do nothing
    else New Block is correct
      Node_Manager -> Chain_Manager: Remove Last Block Request
      activate Chain_Manager
      Chain_Manager -> TX_Manager: Save TXs in Last Block in TX Pool
      Chain_Manager -> Storage: Remove Last Block
      Chain_Manager --> Node_Manager: Pass/Fail
      deactivate Chain_Manager
      Node_Manager -> Chain_Manager: Save Block Request
      activate Chain_Manager
      Chain_Manager -> TX_Manager: Remove TXs in New Block from TX Pool
      Chain_Manager -> Storage: Save New Block
      Chain_Manager --> Node_Manager: Pass/Fail
      deactivate Chain_Manager
    end
  end
end
@enduml
